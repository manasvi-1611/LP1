import java.util.*;
public class WorstFitPrac {
    public static void worstFit(int[] blocks, int numBlocks, int[] processes, int numProcesses) {
        int[] alloc = new int[numProcesses];
        Arrays.fill(alloc, -1); // Initialize allocation array
        for (int i = 0; i < numProcesses; i++) {
            int maxWaste = -1, worstBlockIndex = -1;
            // Find the block with the maximum waste that fits the current process
            for (int j = 0; j < numBlocks; j++) {
                if (blocks[j] >= processes[i]) {
                    int waste = blocks[j] - processes[i];
                    if (waste > maxWaste) {
                        maxWaste = waste;
                        worstBlockIndex = j;
                    }
                }
            }
            // Allocate process to the worst block if found
            if (worstBlockIndex != -1) {
                alloc[i] = worstBlockIndex;
                blocks[worstBlockIndex] -= processes[i];
            }
        }
        // Display the allocation results
        System.out.println("\nProcess No.\tProcess Size\tBlock no.");
        for (int i = 0; i < numProcesses; i++) {
            System.out.println((i+1) + "\t\t" + processes[i] + "\t\t" + (alloc[i] + 1));
        }
    }
    public static void main(String[] args) {
        worstFit(new int[]{100, 500, 200, 300, 600}, 5, new int[]{212, 417, 112, 426}, 4);
    }
}
